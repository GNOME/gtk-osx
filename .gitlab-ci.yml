workflow:
  rules:
    # run merge request pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # do not run branch pipelines if corresponding merge requests exist...
    # (this avoids duplicate pipelines)
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # ...but otherwise run branch pipelines
    - if: $CI_COMMIT_BRANCH

variables:
  GIT_DEPTH: 1

stages:
  - build

build:
  stage: build
  parallel:
    matrix:
      - GTK_VERSION: [ "gtk3", "gtk4" ]
  tags:
    - macos
    - arm64
  cache:
    - key: packages-$GTK_VERSION
      paths:
        - pkgs
      when: always
    - key: ccache-$GTK_VERSION
      paths:
        - ccache
      when: always
  variables:
    CCACHE_VER: "4.11.3"
    CCACHE_URL: https://github.com/ccache/ccache/releases/download/v$CCACHE_VER/ccache-$CCACHE_VER-darwin.tar.gz
    CCACHE_DIR: $CI_PROJECT_DIR/ccache
    CCACHE_MAXSIZE: "500Mi"
    ORKA_RUNNER: sonoma
    SDKROOT: /opt/sdks/MacOSX11.3.sdk
  script:
    # init: set us up
    - export PATH=$HOME/.new_local/bin:$PATH
    - ./gtk-osx-setup.sh
    # config: set deployment target to SDK version
    - |
      {
        echo "setup_sdk(target=\"$(/usr/libexec/PlistBuddy \
            -c "Print :DefaultProperties:MACOSX_DEPLOYMENT_TARGET" \
            "$SDKROOT"/SDKSettings.plist)\")"
      } >$HOME/.config/jhbuildrc-custom
    # config: use the local 'modulesets-stable' moduleset
    - |
      {
        echo "moduleset = \"gtk-osx\""
        echo "modulesets_dir = \"$CI_PROJECT_DIR/modulesets-stable\""
        echo "use_local_modulesets = True"
      } >>$HOME/.config/jhbuildrc-custom
    # config: move tarballdir below workspace (required for caching)
    - |
      {
        echo "tarballdir = \"$CI_PROJECT_DIR/pkgs\""
      } >>$HOME/.config/jhbuildrc-custom
    # config: use ccache to speed up the builds
    - |
      curl -L $CCACHE_URL | tar -C $HOME/.new_local/bin -xz --strip-components=1 ccache-$CCACHE_VER-darwin/ccache
      for compiler in clang clang++ gcc g++; do
        ln -s $HOME/.new_local/bin/ccache $HOME/.new_local/bin/$compiler
      done
      {
        echo "os.environ[\"CC\"] = \"$HOME/.new_local/bin/gcc\""
        echo "os.environ[\"OBJC\"] = \"$HOME/.new_local/bin/gcc\""
        echo "os.environ[\"CXX\"] = \"$HOME/.new_local/bin/g++\""
      } >>$HOME/.config/jhbuildrc-custom
    # run: bootstrap
    - jhbuild bootstrap-gtk-osx
    # run: build modules
    - |
      case "$GTK_VERSION" in
        gtk3)
          jhbuild build meta-gtk-osx-bootstrap meta-gtk-osx-gtk3
          ;;
        gtk4)
          jhbuild build meta-gtk-osx-bootstrap gtk-4
          ;;
        *)
          echo "invalid GTK version: $GTK_VERSION"
          ;;
      esac
